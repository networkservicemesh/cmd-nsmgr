---
name: ci
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v1
        with:
          config_file: .yamllint.yml
          strict: true

  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: shellcheck
        uses: fkautz/shell-linter@v1.0.1

  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Build
        run: go build -race ./...

  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    if: github.repository != 'networkservicemesh/cmd-template'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.35.0

  excludeFmtErrorf:
    name: exclude fmt.Errorf
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Exclude fmt.Errorf
        run: |
          if grep -r --include=*.go --exclude=*.pb.go fmt.Errorf . ; then
           echo "Please use errors.Errorf (or errors.New or errors.Wrap or errors.Wrapf) as appropriate rather than fmt.Errorf"
           exit 1
          fi

  restrictNSMDeps:
    name: Restrict dependencies on github.com/networkservicemesh/*
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Restrict dependencies on github.com/networkservicemesh/*
        env:
          ALLOWED_REPOSITORIES: "sdk, api, sdk-k8s, sdk-vpp, sdk-sriov"
        run: |
          for i in $(grep github.com/networkservicemesh/ go.mod | grep -v '^module' | sed 's;.*\(github.com\/networkservicemesh\/[^ ]*\).*;\1;g');do
            if ! [ "$(echo ${ALLOWED_REPOSITORIES} | grep ${i#github.com/networkservicemesh/})" ]; then
              echo Dependency on "${i}" is forbidden
              exit 1
            fi;
          done

  checkgomod:
    name: Check go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - run: go mod tidy
      - name: Check for changes
        run: |
          git diff --name-only --exit-code || ( echo "Run go mod tidy" && false )

  gogenerate:
    name: Check generated files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - run: go generate ./...
      - name: Check for changes
        run: |
          git diff --name-only --exit-code || ( echo "Rerun go generate ./... locally and resubmit" && false )

  excludereplace:
    name: Exclude Replace in go.mod
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
      - name: Exclude replace in go.mod
        run: |
          grep ^replace go.mod || exit 0
          exit 1

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    if: github.repository != 'networkservicemesh/cmd-template'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Build container
        run: docker build .
      - name: Run tests
        run: docker run --privileged --rm $(docker build -q . --target test)
      - name: Find merged PR
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          github-token: ${{ github.token }}
      - name: Publish Image
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && success() && steps.findPr.outputs.number
        uses: matootie/github-docker@v3.0.0
        with:
          accessToken: ${{ github.token }}
          tag: |
            pr-${{ steps.findPr.outputs.pr }}
            commit-${{ github.sha }}
            latest
